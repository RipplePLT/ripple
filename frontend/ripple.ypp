%{	
#include <cctype>
#include <cstdio>
#include <string>
#include <iostream>
#include "frontend/symbol_table/symbol_table.h"
#include "frontend/ast.h"
#include "misc/debug_tools.h"
using namespace std;

extern int yylex();
void yyerror(const char *s) { printf("%s\n", s); }
//#define YYSTYPE std::string

extern SymbolTable sym_table;

extern int line_no;

extern string cpp_code;
extern e_type last_type;
%}


%union {
    ProgramNode *prog;
    ProgramSectionNode *progsec;
    FunctionNode *func;
    SymbolTableNode *st_node;
    DatasetNode *dataset;

    StatementListNode *stmt_list;    
    StatementNode *stmt;
    DeclarativeStatementNode *dec_stmt;
    ConditionalStatementNode *cond_stmt;
    JumpStatementNode *jump_stmt;
    LoopStatementNode *loop_stmt;

    ExpressionNode *expr;
    BinaryExpressionNode *bin_expr;
    UnaryExpressionNode *un_expr;
    
    ArrayAccessNode *arr_acc;
    DatasetAccessNode *ds_acc;
    FunctionCallNode *fn_call;
    LiteralNode *lit;
    ValueNode *val;
    ArgsNode *args;
    ArrayInitNode *ainit;
    DeclArgsNode *decl_args;
    IDNode *idn;
    TypeNode *type;

    int integer;
    string *string;
    double decimal;
    bool boolean;
}

/***************
    KEYWORDS 
***************/
%token <integer> IF
%token <integer> ELSE
%token <integer> FOR
%token <integer> WHILE
%token <integer> LINK
%token <integer> IMPORT
%token <integer> FINAL
%token <integer> RETURN
%token <integer> CONTINUE
%token <integer> BREAK

/***************
      TYPES 
***************/
%token <integer> TYPE
%token <integer> BOOL
%token <integer> BYTE
%token <integer> INT
%token <integer> FLOAT
%token <integer> STRING 
%token <integer> DATASET
%token <integer> VOID

/***************
    IDIABLES 
***************/
%token <string> ID
%token <integer> INTEGER
%token <decimal> FLOAT_LIT 
%token <string>  STRING_LITERAL 
%token <boolean> TRUE
%token <boolean> FALSE

/*****************
    SEPARATORS
*****************/
%token tSEMI
%token tCOMMA
%token tL_PAREN
%token tR_PAREN
%token tL_BRACKET
%token tR_BRACKET
%token tL_CURLY
%token tR_CURLY
%type <prog> program
%type <progsec> program_section
%type <dataset> dataset_declaration
%type <idn> var
%type <type> dtype
%type <lit> literal
%type <un_expr> unary_expression
%type <bin_expr> exp_expression mult_expression add_expression rel_expression eq_expression and_expression or_expression
%type <expr> expression opt_expression
%type <arr_acc> array_access
%type <fn_call> function_call
%type <ds_acc> dataset_access
%type <val> value array_opt
%type <args> args
%type <ainit> array_initialization
%type <dec_stmt> declarative_statement
%type <jump_stmt> jump_statement
%type <cond_stmt> conditional_statement
%type <loop_stmt> loop_statement
%type <stmt> statement
%type <stmt_list> statement_list statement_block else_statement
%type <func> function
%type <decl_args> decl_args

%left tEQ
%left tNE

%left tLT
%left tLE
%left tGT
%left tGE

%left AND
%left OR

%left tPLUS
%left tMINUS
%left tTIMES
%left tDIV
%left tMOD
%left tFLDIV

%right tEXP
%right tSIZE
%right NOT 

%right tASSIGN
%right tACCESS

%%

program : program program_section     { $$->add_section($2);
                                        cpp_code = $$->code;
                                        d("program");  }
       |                              { $$ = new ProgramNode(); }
       ;

program_section : function { $$ = new ProgramSectionNode($1); d("program section"); }
                | dataset_declaration { $$ = new ProgramSectionNode($1); d("program section"); }
                ;

function : dtype ID tL_PAREN decl_args tR_PAREN statement_block { $$ = new FunctionNode($1, *$2, $4, $6);
                                                                  sym_table.add_function(*($2), ($1)->type, line_no, $4->to_enum_list());
                                                                  d("function");
                                                                }
         ;

dataset_declaration : DATASET ID tL_CURLY decl_args tR_CURLY  { $$ = new DatasetNode(*$2, $4); }
                    ;

statement_block : tL_CURLY statement_list tR_CURLY { $$ = $2; $$->code = "{\n" + $2->code + "}\n"; d("statement_block"); }
                | tL_CURLY tR_CURLY { $$ = new StatementListNode(); $$->code = "{}\n"; d("empty statement_block");}
                ;

statement_list : statement_list statement       { $1->push_statement($2); d("statement_list - stmt-list"); }
               | statement                      { $$ = new StatementListNode(); $$->push_statement($1); d("statement_list - stmt"); }
               | 
               ;

statement : declarative_statement               { $$ = new StatementNode($1); d("statement - declarative"); }
          | conditional_statement               { $$ = new StatementNode($1); d("statement - conditional"); }
          | jump_statement                      { $$ = new StatementNode($1); d("statement - jump"); }
          | loop_statement                      { $$ = new StatementNode($1); d("statement - loop"); }
          ;

jump_statement : RETURN expression tSEMI        { $$ = new JumpStatementNode("return", $2); d("jump - return"); }
               | CONTINUE tSEMI                 { $$ = new JumpStatementNode("continue"); d("jump - continue"); }
               | BREAK tSEMI                    { $$ = new JumpStatementNode("break"); d("jump - break"); }
               ;


conditional_statement : IF tL_PAREN expression tR_PAREN statement_block else_statement  { $$ = new ConditionalStatementNode($3, $5, $6);
                                                                                          d("conditional statement"); }
                      ;

else_statement : ELSE statement_block   { $$ = $2; d("else statement"); }
                |                       { $$ = NULL; }
                ;

loop_statement : FOR tL_PAREN opt_expression tSEMI opt_expression tSEMI opt_expression tR_PAREN statement_block { $$ = new LoopStatementNode($3, $5, $7, $9); d("loop - for"); }
                | WHILE tL_PAREN expression tR_PAREN statement_block { $$ = new LoopStatementNode(nullptr ,$3, nullptr, $5); d("loop - while"); }

declarative_statement : dtype expression tSEMI   { $$ = new DeclarativeStatementNode($1, $2); 
                                                   d("declarative statement -  type expr"); delete $1; }
                      | expression tSEMI         { $$ = new DeclarativeStatementNode($1); d("declarative statement - expr"); }
                      ;

opt_expression : expression            { $$ = $1; d("opt_expression"); }
               |                               { $$ = nullptr; d("no opt_expression");}
               ;

expression : or_expression               { $$ = new ExpressionNode($1);  d("expression"); }
           | value tASSIGN or_expression { $$ = new ExpressionNode($3, $1); d("expression assign"); }
           ;

or_expression : and_expression                  { $$ = $1; d("or_expression"); }
              | or_expression OR and_expression { $$ = new BinaryExpressionNode($1, "or", $3); d("or_expression OR"); }
              ;

and_expression : eq_expression                      { $$ = $1; d("and_expression"); }
               | and_expression AND eq_expression   { $$ = new BinaryExpressionNode($1, "and", $3); d("and_expression AND"); }
               ;

eq_expression : rel_expression                      { $$ = $1; d("eq_expression"); }
              | eq_expression tEQ rel_expression    { $$ = new BinaryExpressionNode($1, "==", $3); d("eq_expression =="); }
              | eq_expression tNE rel_expression    { $$ = new BinaryExpressionNode($1, "!=", $3); d("eq_expression !="); }
              ;

rel_expression : add_expression                     { $$ = $1; d("rel_expression"); }
               | rel_expression tGT add_expression  { $$ = new BinaryExpressionNode($1, ">", $3); d("rel_expression >"); }
               | rel_expression tLT add_expression  { $$ = new BinaryExpressionNode($1, "<", $3); d("rel_expression <"); }
               | rel_expression tGE add_expression  { $$ = new BinaryExpressionNode($1, ">=", $3); d("rel_expression >="); }
               | rel_expression tLE add_expression  { $$ = new BinaryExpressionNode($1, "<=", $3); d("rel_expression <="); }
               ;

add_expression : mult_expression                       { $$ = $1; d("add_expression");}
               | add_expression tPLUS mult_expression  { $$ = new BinaryExpressionNode($1, "+", $3); d("add_expression +");}
               | add_expression tMINUS mult_expression { $$ = new BinaryExpressionNode($1, "-", $3);  d("add_expression -"); }
               ;

mult_expression : exp_expression                         { $$ = $1; d("mult_expression");}
                | mult_expression tTIMES exp_expression  { $$ = new BinaryExpressionNode($1, "*", $3);  d("mult_expression *"); }
                | mult_expression tDIV exp_expression    { $$ = new BinaryExpressionNode($1, "/", $3);  d("mult_expression /"); }
                | mult_expression tFLDIV exp_expression  { $$ = new BinaryExpressionNode($1, "//", $3);  d("mult_expression //"); }
                | mult_expression tMOD exp_expression    { $$ = new BinaryExpressionNode($1, "%", $3);  d("mult_expression %"); }
                ;

exp_expression : unary_expression                        { $$ = new BinaryExpressionNode($1); d("exp_expression");}
               | exp_expression tEXP unary_expression    { $$ = new BinaryExpressionNode($1, "^", $3);  d("exp expression ^"); }
               ;

unary_expression : value                       { $$ = new UnaryExpressionNode($1); d("unary_expression");};	
                 | tMINUS unary_expression     { $$ = new UnaryExpressionNode($2, "-");  d("unary_expression -"); }
                 | tSIZE unary_expression      { $$ = new UnaryExpressionNode($2, "@");  d("unary_expression @"); }
                 | tL_PAREN dtype tR_PAREN unary_expression { /*TODO FIX */}
                 | NOT unary_expression        { $$ = new UnaryExpressionNode($2, "not");  d("unary_expression not"); }
                 ;

value : literal            { $$ = new ValueNode($1); d("value - literal"); }
      | function_call      { $$ = new ValueNode($1); d("value - function_call"); }
      | array_access       { $$ = new ValueNode($1); d("value - array_access"); }
      | dataset_access     { $$ = new ValueNode($1); d("value - dataset_access"); }
      | var                 { $$ = new ValueNode($1); d("value - id");}
      | tL_PAREN expression tR_PAREN { $$ = new ValueNode($2); d("value - expression"); }
      | tL_CURLY array_initialization tR_CURLY  { $$ = new ValueNode($2); d("value - array_initialization"); }
      ;

array_initialization : array_initialization tCOMMA expression   { $1->add_arg($3); d("array_initialization added - 1"); }
                     | expression                               { $$ = new ArrayInitNode(); $$->add_arg($1); d("arg added"); }
                     |                                          { $$ = new ArrayInitNode(); d("empty arg");}
                     ;

args : args tCOMMA expression   { $1->add_arg($3); d("arg added - 1"); }
     | expression               { $$ = new ArgsNode(); $$->add_arg($1); d("arg added"); }
     |                          { $$ = new ArgsNode(); d("empty arg");}
     ;

decl_args : decl_args tCOMMA dtype var   { $1->add_arg($3, $4); d("decl arg added - 1"); }
          | dtype var                    { $$ = new DeclArgsNode($1, $2); d("decl arg added"); }
          |                              { $$ = new DeclArgsNode(); d("empty decl arg"); }
          ;

array_opt : tL_BRACKET value tR_BRACKET { $$ = $2; saw_type = true; d("array_opt"); }
          | tL_BRACKET tR_BRACKET       { $$ = new ValueNode(new LiteralNode(-1)); $$->type = tINT; $$->code = ""; $$->sym = tVAR; saw_type = true; d("empty array opt");}
          |                             { $$ = nullptr; }
          ;

function_call : ID tL_PAREN args tR_PAREN { $$ = new FunctionCallNode(*($1), $3); d("function call"); }
	          ;

array_access : value tL_BRACKET expression tR_BRACKET { $$ = new ArrayAccessNode($1, $3); d("Array access");}
             ;

dataset_access : ID tACCESS ID { $$ = new DatasetAccessNode(*$1, *$3); d("Dataset access");}
               ;

var : ID { Entry *entry = sym_table.get(*yylval.string);
           if (entry) {
                $$ = new IDNode(entry); d("id");
            } else {
                Entry *fake_entry = new Entry(*yylval.string, line_no);
                $$ = new IDNode(fake_entry); d("undeclared id");
            }
          }

dtype : TYPE {  $$ = new TypeNode(last_type); d("type: " + *yylval.string); }
      | DATASET ID  { $$ = new TypeNode(last_type); d("dataset: " + *yylval.string); }
      | TYPE tL_BRACKET INTEGER tR_BRACKET { $$ = new TypeNode(last_type, $3); d("array: " + *yylval.string); }
      ;

literal : INTEGER                 { $$ = new LiteralNode($1); $$->code = to_string(yylval.integer); d("literal - INT");}	
        | FLOAT_LIT               { $$ = new LiteralNode($1); $$->code = to_string(yylval.decimal); d("literal - FLOAT");}
        | STRING_LITERAL          { $$ = new LiteralNode($1); $$->code = *yylval.string; d("literal - STRING"); }
        | TRUE				            { $$ = new LiteralNode($1); $$->code = "true";  d("literal - true"); }
        | FALSE				            { $$ = new LiteralNode($1); $$->code = "false"; d("literal - false"); }  
        ;

%%
