%{	
#include <cctype>
#include <cstdio>
#include <string>

#include "frontend/ast.h"

extern "C" {
    int yyparse(void);
    int yylex(void);
    void yyerror(const char *s);
}

#define YYSTYPE int
%}

%union {
    ASTNode *node;
    Expression *expr;
    OrExpression *orExpr;
    AndExpression *andExpr;
    EqExpression *eqExpr;
    RelExpression *relExpr;
    AddExpression *addExpr;
    MultExpression *multExpr;
    ExpExpression *exprExpr;
    UnaryExpression *unExpr;
    ValueNode *val;
    IntNode *intNode;
    FloatNode *floatNode;
    StringNode *stringNode;
    int integer;
    std::string string;
    double decimal;
    bool boolean;
}

/***************
    KEYWORDS 
***************/
%token <integer> IF
%token <integer> ELSE
%token <integer> FOR
%token <integer> WHILE
%token <integer> LINK
%token <integer> IMPORT
%token <integer> FINAL
%token <integer> RETURN
%token <integer> CONTINUE
%token <integer> BREAK

/***************
      TYPES 
***************/
%token <integer> TYPE
%token <integer> BOOL
%token <integer> BYTE
%token <integer> INT
%token <integer> FLOAT
%token <integer> STRING 
%token <integer> DATASET
%token <integer> VOID

/***************
       OP
***************/
%token <integer> AND 
%token <integer> OR 
%token <integer> NOT 

/***************
    VARIABLES 
***************/
%token <integer> ID
%token <integer> INTEGER
%token <float>   FLOAT_LIT 
%token <string>  LITERAL 
%token <integer> TRUE
%token <integer> FALSE


%left "=="
%left "!="

%left "<"
%left "<="
%left ">"
%left ">="

%left AND
%left OR

%left "+" 
%left "-" 
%left "*" 
%left "/" 
%left "%" 
%left "//"

%right "^" 
%right "@"
%right NOT 

%%

/* TEMPORARY; ONLY HERE TO TEST EXPRESSIONS */
program : program expression ";"
        |
        ;

args : args "," expression
     | expression
     ;

expression : or_expression
           | value "=" or_expression	
           ;

or_expression : and_expression
              | or_expression OR and_expression
              ;

and_expression : eq_expression
               | and_expression AND eq_expression
               ;

eq_expression : rel_expression
              | eq_expression "==" rel_expression
              | eq_expression "!=" rel_expression
              ;

rel_expression : add_expression
               | rel_expression ">" add_expression
               | rel_expression "<" add_expression
               | rel_expression ">=" add_expression
               | rel_expression "<=" add_expression
               ;

add_expression : mult_expression
               | add_expression "+" mult_expression
               | add_expression "-" mult_expression
               ;

mult_expression : exp_expression
                | mult_expression "*" exp_expression
                | mult_expression "/" exp_expression
                | mult_expression "//" exp_expression
                | mult_expression "%" exp_expression
                ;

exp_expression : unary_expression
               | exp_expression "^" unary_expression
               ;

unary_expression : value			
                 | "-" unary_expression
                 | "@" unary_expression	
                 | "(" TYPE ")" unary_expression
                 | NOT unary_expression
                 ;

value : unit
      | function_call
      | array_access
      | dataset_access
      ;

function_call : ID "(" args ")"
	      | ID "()"
	      ;

array_access : value "[" expression "]"
             ;

dataset_access : value "." ID 
               ;

unit  : ID				 
      | INTEGER				
      | FLOAT_LIT
      | STRING 
      | TRUE				
      | FALSE				
      | "(" expression ")"
      ;

%%

void yyerror(char *s) {
    fprintf(stderr, "%s\n", s);
}

int main(void) {
    yyparse();
    return 0;
}
